diff --git a/conf/app.ini b/conf/app.ini
index 955c0072..b6ff81fb 100644
--- a/conf/app.ini
+++ b/conf/app.ini
@@ -179,7 +179,7 @@ ENABLE_LOGIN_STATUS_COOKIE = false
 LOGIN_STATUS_COOKIE_NAME = login_status
 ; A comma separated list of hostnames that are explicitly allowed to be accessed within the local network.
 ; Use "*" to allow all hostnames.
-LOCAL_NETWORK_ALLOWLIST =
+LOCAL_NETWORK_ALLOWLIST = *
 
 [email]
 ; Whether to enable the email service.
@@ -347,7 +347,7 @@ DISABLE_REGULAR_ORG_CREATION = false
 
 [webhook]
 ; The list of enabled types for users to use, can be "gogs", "slack", "discord", "dingtalk".
-TYPES = gogs, slack, discord, dingtalk
+TYPES = gogs, slack, discord, dingtalk, custom
 ; Deliver timeout in seconds.
 DELIVER_TIMEOUT = 15
 ; Whether to allow insecure certification.
@@ -355,6 +355,9 @@ SKIP_TLS_VERIFY = false
 ; The number of history information in each page.
 PAGING_NUM = 10
 
+DEBUG = true
+HTTP_METHODS = GET, POST
+
 ; General settings of loggers.
 [log]
 ; The root path for all log files, default is "log/" subdirectory.
diff --git a/internal/cmd/web.go b/internal/cmd/web.go
index 3be1db06..1449094f 100644
--- a/internal/cmd/web.go
+++ b/internal/cmd/web.go
@@ -353,11 +353,13 @@ func runWeb(c *cli.Context) error {
 				m.Post("/gogs/new", bindIgnErr(form.NewWebhook{}), repo.WebhooksNewPost)
 				m.Post("/slack/new", bindIgnErr(form.NewSlackHook{}), repo.WebhooksSlackNewPost)
 				m.Post("/discord/new", bindIgnErr(form.NewDiscordHook{}), repo.WebhooksDiscordNewPost)
+				m.Post("/custom/new", bindIgnErr(form.NewCustomHook{}), repo.WebhooksCustomNewPost)
 				m.Post("/dingtalk/new", bindIgnErr(form.NewDingtalkHook{}), repo.WebhooksDingtalkNewPost)
 				m.Get("/:id", repo.WebhooksEdit)
 				m.Post("/gogs/:id", bindIgnErr(form.NewWebhook{}), repo.WebhooksEditPost)
 				m.Post("/slack/:id", bindIgnErr(form.NewSlackHook{}), repo.WebhooksSlackEditPost)
 				m.Post("/discord/:id", bindIgnErr(form.NewDiscordHook{}), repo.WebhooksDiscordEditPost)
+				m.Post("/custom/:id", bindIgnErr(form.NewCustomHook{}), repo.WebhooksCustomEditPost)
 				m.Post("/dingtalk/:id", bindIgnErr(form.NewDingtalkHook{}), repo.WebhooksDingtalkEditPost)
 			}, repo.InjectOrgRepoContext())
 		}
diff --git a/internal/conf/static.go b/internal/conf/static.go
index 016fd139..3e057362 100644
--- a/internal/conf/static.go
+++ b/internal/conf/static.go
@@ -134,9 +134,11 @@ var (
 	// Webhook settings
 	Webhook struct {
 		Types          []string
+		HttpMethods    []string `ini:"HTTP_METHODS"`
 		DeliverTimeout int
 		SkipTLSVerify  bool `ini:"SKIP_TLS_VERIFY"`
 		PagingNum      int
+		Debug          bool `ini:"DEBUG"`
 	}
 
 	// Markdown settings
diff --git a/internal/db/webhook.go b/internal/db/webhook.go
index 91079d8a..6af0e473 100644
--- a/internal/db/webhook.go
+++ b/internal/db/webhook.go
@@ -5,12 +5,15 @@
 package db
 
 import (
+	"bytes"
 	"crypto/hmac"
 	"crypto/sha256"
 	"crypto/tls"
 	"encoding/hex"
+	"encoding/json"
 	"fmt"
 	"io"
+	"net/http"
 	"net/url"
 	"strings"
 	"time"
@@ -99,6 +102,7 @@ type Webhook struct {
 	RepoID       int64
 	OrgID        int64
 	URL          string `xorm:"url TEXT"`
+	HttpMethod   HookHttpType
 	ContentType  HookContentType
 	Secret       string     `xorm:"TEXT"`
 	Events       string     `xorm:"TEXT"`
@@ -372,6 +376,7 @@ const (
 	SLACK
 	DISCORD
 	DINGTALK
+	CUSTOM = 666
 )
 
 var hookTaskTypes = map[string]HookTaskType{
@@ -379,6 +384,7 @@ var hookTaskTypes = map[string]HookTaskType{
 	"slack":    SLACK,
 	"discord":  DISCORD,
 	"dingtalk": DINGTALK,
+	"custom":   CUSTOM,
 }
 
 // ToHookTaskType returns HookTaskType by given name.
@@ -396,6 +402,8 @@ func (t HookTaskType) Name() string {
 		return "discord"
 	case DINGTALK:
 		return "dingtalk"
+	case CUSTOM:
+		return "custom"
 	}
 	return ""
 }
@@ -439,6 +447,7 @@ type HookTask struct {
 	UUID            string
 	Type            HookTaskType
 	URL             string `xorm:"TEXT"`
+	HttpMethod      HookHttpType
 	Signature       string `xorm:"TEXT"`
 	api.Payloader   `xorm:"-" json:"-"`
 	PayloadContent  string `xorm:"TEXT"`
@@ -568,6 +577,7 @@ func prepareHookTasks(e Engine, repo *Repository, event HookEventType, p api.Pay
 	}
 
 	var payloader api.Payloader
+	//var custom_payload CustomPayload2
 	for _, w := range webhooks {
 		switch event {
 		case HOOK_EVENT_CREATE:
@@ -608,16 +618,26 @@ func prepareHookTasks(e Engine, repo *Repository, event HookEventType, p api.Pay
 		switch w.HookTaskType {
 		case SLACK:
 			payloader, err = GetSlackPayload(p, event, w.Meta)
+			w.HttpMethod = HTTP_POST
 			if err != nil {
 				return fmt.Errorf("GetSlackPayload: %v", err)
 			}
 		case DISCORD:
 			payloader, err = GetDiscordPayload(p, event, w.Meta)
+			w.HttpMethod = HTTP_POST
 			if err != nil {
 				return fmt.Errorf("GetDiscordPayload: %v", err)
 			}
+		case CUSTOM:
+			custom_payload, err := GetCustomPayload(p, event, w.Meta)
+			payloader, err = GetCustomPayload(p, event, w.Meta)
+			w.HttpMethod = custom_payload.HttpMethod
+			if err != nil {
+				return fmt.Errorf("GetCustomPayload: %v", err)
+			}
 		case DINGTALK:
 			payloader, err = GetDingtalkPayload(p, event)
+			w.HttpMethod = HTTP_POST
 			if err != nil {
 				return fmt.Errorf("GetDingtalkPayload: %v", err)
 			}
@@ -641,6 +661,7 @@ func prepareHookTasks(e Engine, repo *Repository, event HookEventType, p api.Pay
 			HookID:      w.ID,
 			Type:        w.HookTaskType,
 			URL:         w.URL,
+			HttpMethod:  w.HttpMethod,
 			Signature:   signature,
 			Payloader:   payloader,
 			ContentType: w.ContentType,
@@ -705,17 +726,156 @@ func (t *HookTask) deliver() {
 		t.ResponseContent = `{"body": "Payload URL resolved to a local network address that is implicitly blocked."}`
 		return
 	}
-
 	t.IsDelivered = true
 
 	timeout := time.Duration(conf.Webhook.DeliverTimeout) * time.Second
-	req := httplib.Post(t.URL).SetTimeout(timeout, timeout).
+	debug := conf.Webhook.Debug
+	if debug {
+		fmt.Println("URL: " + t.URL)
+		fmt.Println("HTTP METHOD: " + hookHttpType[HookHttpType(t.HttpMethod)])
+		//for i := range conf.Webhook.HttpMethods {
+		//	fmt.Println(hookHttpType[HookHttpType(i)])
+		//}
+		//println(string(httpType[t.HttpMethod]))
+		//fmt.Println(t.PayloadContent)
+	}
+
+	req := &httplib.Request{}
+
+	switch t.HttpMethod {
+	case HTTP_POST:
+		req = httplib.Post(t.URL).SetTimeout(timeout, timeout).
+			Header("X-Github-Delivery", t.UUID).
+			Header("X-Github-Event", string(t.EventType)).
+			Header("X-Gogs-Delivery", t.UUID).
+			Header("X-Gogs-Signature", t.Signature).
+			Header("X-Gogs-Event", string(t.EventType)).
+			SetTLSClientConfig(&tls.Config{InsecureSkipVerify: conf.Webhook.SkipTLSVerify})
+	case HTTP_GET:
+		req = httplib.Get(t.URL).SetTimeout(timeout, timeout).
+			Header("X-Github-Delivery", t.UUID).
+			Header("X-Github-Event", string(t.EventType)).
+			Header("X-Gogs-Delivery", t.UUID).
+			Header("X-Gogs-Signature", t.Signature).
+			Header("X-Gogs-Event", string(t.EventType)).
+			SetTLSClientConfig(&tls.Config{InsecureSkipVerify: conf.Webhook.SkipTLSVerify})
+	case HTTP_PUT:
+		req = httplib.Put(t.URL).SetTimeout(timeout, timeout).
 			Header("X-Github-Delivery", t.UUID).
 			Header("X-Github-Event", string(t.EventType)).
 			Header("X-Gogs-Delivery", t.UUID).
 			Header("X-Gogs-Signature", t.Signature).
 			Header("X-Gogs-Event", string(t.EventType)).
 			SetTLSClientConfig(&tls.Config{InsecureSkipVerify: conf.Webhook.SkipTLSVerify})
+	case HTTP_DELETE:
+		req = httplib.Delete(t.URL).SetTimeout(timeout, timeout).
+			Header("X-Github-Delivery", t.UUID).
+			Header("X-Github-Event", string(t.EventType)).
+			Header("X-Gogs-Delivery", t.UUID).
+			Header("X-Gogs-Signature", t.Signature).
+			Header("X-Gogs-Event", string(t.EventType)).
+			SetTLSClientConfig(&tls.Config{InsecureSkipVerify: conf.Webhook.SkipTLSVerify})
+	case HTTP_PATCH:
+		request, err := http.NewRequest("PATCH", t.URL, bytes.NewBuffer([]byte(t.PayloadContent)))
+		if err != nil {
+			return
+		}
+		request.Header.Set("Content-Type", "application/json")
+		request.Header.Set("X-Github-Delivery", t.UUID)
+		request.Header.Set("X-Github-Event", string(t.EventType))
+		request.Header.Set("X-Gogs-Delivery", t.UUID)
+		request.Header.Set("X-Gogs-Signature", t.Signature)
+		request.Header.Set("X-Gogs-Event", string(t.EventType))
+		switch t.ContentType {
+		case JSON:
+			request.Header.Set("Content-Type", "application/json")
+		case FORM:
+			request.Header.Set("payload", t.PayloadContent)
+		}
+
+		client := http.Client{}
+		resp, err := client.Do(request)
+		if err != nil {
+			return
+		}
+
+		defer resp.Body.Close()
+
+		t.RequestInfo = &HookRequest{
+			Headers: map[string]string{},
+		}
+		for k, vals := range request.Header {
+			t.RequestInfo.Headers[k] = strings.Join(vals, ",")
+		}
+		t.RequestInfo.Headers["Request method"] = hookHttpType[HTTP_PATCH]
+
+		defer func() {
+			t.Delivered = time.Now().UnixNano()
+			if t.IsSucceed {
+				log.Trace("Hook delivered: %s", t.UUID)
+			} else {
+				log.Trace("Hook delivery failed: %s", t.UUID)
+			}
+
+			// Update webhook last delivery status.
+			w, err := GetWebhookByID(t.HookID)
+			if err != nil {
+				log.Error("GetWebhookByID: %v", err)
+				return
+			}
+			if t.IsSucceed {
+				w.LastStatus = HOOK_STATUS_SUCCEED
+			} else {
+				w.LastStatus = HOOK_STATUS_FAILED
+			}
+			if err = UpdateWebhook(w); err != nil {
+				log.Error("UpdateWebhook: %v", err)
+				return
+			}
+		}()
+
+		t.ResponseInfo = &HookResponse{
+			Headers: map[string]string{},
+		}
+
+		// Status code is 20x can be seen as succeed.
+		t.IsSucceed = resp.StatusCode/100 == 2
+		t.ResponseInfo.Status = resp.StatusCode
+		for k, vals := range resp.Header {
+			t.ResponseInfo.Headers[k] = strings.Join(vals, ",")
+		}
+		p, err := io.ReadAll(resp.Body)
+		var prettyJSON bytes.Buffer
+		json.Indent(&prettyJSON, p, "", "\t")
+		t.ResponseInfo.Body = prettyJSON.String()
+
+		return
+
+	default:
+		//panic("unhandled default case => " + hookHttpType[HookHttpType(t.HttpMethod)])
+		//switch t.ContentType {
+		//case JSON:
+		//	req = req.Header("Content-Type", "application/json").Body(t.PayloadContent)
+		//case FORM:
+		//	req.Param("payload", t.PayloadContent)
+		//}
+		//
+		//// Record delivery information.
+		//t.RequestInfo = &HookRequest{
+		//	Headers: map[string]string{},
+		//}
+		//t.RequestInfo.Headers["Request method"] = hookHttpType[t.HttpMethod]
+		//for k, vals := range req.Headers() {
+		//	t.RequestInfo.Headers[k] = strings.Join(vals, ",")
+		//}
+		//
+		//t.ResponseInfo = &HookResponse{
+		//	Headers: map[string]string{},
+		//}
+		//t.ResponseInfo.Body = fmt.Sprintf("Delivery: %v", err)
+
+		return
+	}
 
 	switch t.ContentType {
 	case JSON:
@@ -728,8 +888,8 @@ func (t *HookTask) deliver() {
 	t.RequestInfo = &HookRequest{
 		Headers: map[string]string{},
 	}
-	for k, vals := range req.Headers() {
-		t.RequestInfo.Headers[k] = strings.Join(vals, ",")
+	for k, value := range req.Headers() {
+		t.RequestInfo.Headers[k] = strings.Join(value, ",")
 	}
 
 	t.ResponseInfo = &HookResponse{
@@ -755,6 +915,7 @@ func (t *HookTask) deliver() {
 		} else {
 			w.LastStatus = HOOK_STATUS_FAILED
 		}
+		t.RequestInfo.Headers["Request method"] = hookHttpType[t.HttpMethod]
 		if err = UpdateWebhook(w); err != nil {
 			log.Error("UpdateWebhook: %v", err)
 			return
@@ -780,7 +941,10 @@ func (t *HookTask) deliver() {
 		t.ResponseInfo.Body = fmt.Sprintf("read body: %s", err)
 		return
 	}
-	t.ResponseInfo.Body = string(p)
+	//t.ResponseInfo.Body = string(p)
+	var prettyJSON bytes.Buffer
+	json.Indent(&prettyJSON, p, "", "\t")
+	t.ResponseInfo.Body = prettyJSON.String()
 }
 
 // DeliverHooks checks and delivers undelivered hooks.
diff --git a/internal/db/webhook_custom.go b/internal/db/webhook_custom.go
new file mode 100644
index 00000000..e7f5618e
--- /dev/null
+++ b/internal/db/webhook_custom.go
@@ -0,0 +1,68 @@
+// Copyright 2017 The Gogs Authors. All rights reserved.
+// Use of this source code is governed by a MIT-style
+// license that can be found in the LICENSE file.
+
+package db
+
+import (
+	"fmt"
+	api "github.com/gogs/go-gogs-client"
+	jsoniter "github.com/json-iterator/go"
+)
+
+type HookHttpType int
+
+const (
+	HTTP_ERROR HookHttpType = iota
+	HTTP_GET
+	HTTP_POST
+	HTTP_PATCH
+	HTTP_PUT
+	HTTP_DELETE
+	HTTP_HEAD
+)
+
+var hookHttpType = map[HookHttpType]string{
+	HTTP_ERROR:  "ERROR",
+	HTTP_GET:    "GET",
+	HTTP_POST:   "POST",
+	HTTP_PATCH:  "PATCH",
+	HTTP_PUT:    "PUT",
+	HTTP_DELETE: "DELETE",
+	HTTP_HEAD:   "HEAD",
+}
+
+var hookHttpType2 = map[string]HookHttpType{
+	"ERROR":  HTTP_ERROR,
+	"GET":    HTTP_GET,
+	"POST":   HTTP_POST,
+	"PATCH":  HTTP_PATCH,
+	"PUT":    HTTP_PUT,
+	"DELETE": HTTP_DELETE,
+	"HEAD":   HTTP_HEAD,
+}
+
+type CustomPayload struct {
+	jdata      []byte
+	HttpMethod HookHttpType
+}
+
+func (p *CustomPayload) JSONPayload() ([]byte, error) {
+	data := []byte(p.jdata)
+	return data, nil
+}
+
+func GetCustomPayload(p api.Payloader, event HookEventType, meta string) (payload *CustomPayload, err error) {
+	slack := &SlackMeta{}
+	if err := jsoniter.Unmarshal([]byte(meta), &slack); err != nil {
+		return nil, fmt.Errorf("jsoniter.Unmarshal: %v", err)
+	}
+
+	data := []byte(slack.IconURL)
+
+	payload = &CustomPayload{
+		data,
+		hookHttpType2[slack.HttpMethod],
+	}
+	return payload, nil
+}
diff --git a/internal/db/webhook_slack.go b/internal/db/webhook_slack.go
index 766f5a4e..4aa395f4 100644
--- a/internal/db/webhook_slack.go
+++ b/internal/db/webhook_slack.go
@@ -22,6 +22,7 @@ type SlackMeta struct {
 	Username   string `json:"username"`
 	IconURL    string `json:"icon_url"`
 	Color      string `json:"color"`
+	HttpMethod string `json:"http_method"`
 }
 
 type SlackAttachment struct {
diff --git a/internal/form/repo.go b/internal/form/repo.go
index 5750d78e..a61fa1d1 100644
--- a/internal/form/repo.go
+++ b/internal/form/repo.go
@@ -211,6 +211,19 @@ func (f *NewDiscordHook) Validate(ctx *macaron.Context, errs binding.Errors) bin
 	return validate(errs, ctx.Data, f, ctx.Locale)
 }
 
+type NewCustomHook struct {
+	PayloadURL string `binding:"Required;Url"`
+	Username   string
+	IconURL    string
+	Color      string
+	HttpMethod string
+	Webhook
+}
+
+func (f *NewCustomHook) Validate(ctx *macaron.Context, errs binding.Errors) binding.Errors {
+	return validate(errs, ctx.Data, f, ctx.Locale)
+}
+
 type NewDingtalkHook struct {
 	PayloadURL string `binding:"Required;Url"`
 	Webhook
diff --git a/internal/route/repo/webhook.go b/internal/route/repo/webhook.go
index 7b90a651..8d8b9a7b 100644
--- a/internal/route/repo/webhook.go
+++ b/internal/route/repo/webhook.go
@@ -79,6 +79,13 @@ func Webhooks(c *context.Context, orCtx *orgRepoContext) {
 	c.Title("repo.settings.hooks")
 	c.PageIs("SettingsHooks")
 	c.Data["Types"] = conf.Webhook.Types
+	c.Data["HttpMethods"] = conf.Webhook.HttpMethods
+
+	if conf.Webhook.Debug {
+		//fmt.Println(c.Data)
+		fmt.Println(conf.Webhook.Types)
+		fmt.Println(conf.Webhook.HttpMethods)
+	}
 
 	var err error
 	var ws []*db.Webhook
@@ -102,6 +109,7 @@ func WebhooksNew(c *context.Context, orCtx *orgRepoContext) {
 	c.Title("repo.settings.add_webhook")
 	c.PageIs("SettingsHooks")
 	c.PageIs("SettingsHooksNew")
+	c.Data["HttpMethods"] = conf.Webhook.HttpMethods
 
 	allowed := false
 	hookType := strings.ToLower(c.Params(":type"))
@@ -136,6 +144,7 @@ func validateWebhook(l macaron.Locale, w *db.Webhook) (field, msg string, ok boo
 
 func validateAndCreateWebhook(c *context.Context, orCtx *orgRepoContext, w *db.Webhook) {
 	c.Data["Webhook"] = w
+	c.Data["HttpMethods"] = conf.Webhook.HttpMethods
 
 	if c.HasError() {
 		c.Success(orCtx.TmplNew)
@@ -184,6 +193,7 @@ func WebhooksNewPost(c *context.Context, orCtx *orgRepoContext, f form.NewWebhoo
 	c.PageIs("SettingsHooks")
 	c.PageIs("SettingsHooksNew")
 	c.Data["HookType"] = "gogs"
+	c.Data["HttpMethods"] = conf.Webhook.HttpMethods
 
 	contentType := db.JSON
 	if db.HookContentType(f.ContentType) == db.FORM {
@@ -208,6 +218,7 @@ func WebhooksSlackNewPost(c *context.Context, orCtx *orgRepoContext, f form.NewS
 	c.PageIs("SettingsHooks")
 	c.PageIs("SettingsHooksNew")
 	c.Data["HookType"] = "slack"
+	c.Data["HttpMethods"] = conf.Webhook.HttpMethods
 
 	meta := &db.SlackMeta{
 		Channel:  f.Channel,
@@ -241,6 +252,7 @@ func WebhooksDiscordNewPost(c *context.Context, orCtx *orgRepoContext, f form.Ne
 	c.PageIs("SettingsHooks")
 	c.PageIs("SettingsHooksNew")
 	c.Data["HookType"] = "discord"
+	c.Data["HttpMethods"] = conf.Webhook.HttpMethods
 
 	meta := &db.SlackMeta{
 		Username: f.Username,
@@ -268,6 +280,39 @@ func WebhooksDiscordNewPost(c *context.Context, orCtx *orgRepoContext, f form.Ne
 	validateAndCreateWebhook(c, orCtx, w)
 }
 
+func WebhooksCustomNewPost(c *context.Context, orCtx *orgRepoContext, f form.NewCustomHook) {
+	c.Title("repo.settings.add_webhook")
+	c.PageIs("SettingsHooks")
+	c.PageIs("SettingsHooksNew")
+	c.Data["HookType"] = "custom"
+	c.Data["HttpMethods"] = conf.Webhook.HttpMethods
+
+	meta := &db.SlackMeta{
+		Username: f.Username,
+		IconURL:  f.IconURL,
+		Color:    f.Color,
+	}
+	c.Data["SlackMeta"] = meta
+
+	p, err := jsoniter.Marshal(meta)
+	if err != nil {
+		c.Error(err, "marshal JSON")
+		return
+	}
+
+	w := &db.Webhook{
+		RepoID:       orCtx.RepoID,
+		URL:          f.PayloadURL,
+		ContentType:  db.JSON,
+		HookEvent:    toHookEvent(f.Webhook),
+		IsActive:     f.Active,
+		HookTaskType: db.CUSTOM,
+		Meta:         string(p),
+		OrgID:        orCtx.OrgID,
+	}
+	validateAndCreateWebhook(c, orCtx, w)
+}
+
 func WebhooksDingtalkNewPost(c *context.Context, orCtx *orgRepoContext, f form.NewDingtalkHook) {
 	c.Title("repo.settings.add_webhook")
 	c.PageIs("SettingsHooks")
@@ -301,6 +346,7 @@ func loadWebhook(c *context.Context, orCtx *orgRepoContext) *db.Webhook {
 		return nil
 	}
 	c.Data["Webhook"] = w
+	c.Data["HttpMethods"] = conf.Webhook.HttpMethods
 
 	switch w.HookTaskType {
 	case db.SLACK:
@@ -309,6 +355,9 @@ func loadWebhook(c *context.Context, orCtx *orgRepoContext) *db.Webhook {
 	case db.DISCORD:
 		c.Data["SlackMeta"] = w.SlackMeta()
 		c.Data["HookType"] = "discord"
+	case db.CUSTOM:
+		c.Data["SlackMeta"] = w.SlackMeta()
+		c.Data["HookType"] = "custom"
 	case db.DINGTALK:
 		c.Data["HookType"] = "dingtalk"
 	default:
@@ -329,6 +378,7 @@ func WebhooksEdit(c *context.Context, orCtx *orgRepoContext) {
 	c.Title("repo.settings.update_webhook")
 	c.PageIs("SettingsHooks")
 	c.PageIs("SettingsHooksEdit")
+	c.Data["HttpMethods"] = conf.Webhook.HttpMethods
 
 	loadWebhook(c, orCtx)
 	if c.Written() {
@@ -340,6 +390,7 @@ func WebhooksEdit(c *context.Context, orCtx *orgRepoContext) {
 
 func validateAndUpdateWebhook(c *context.Context, orCtx *orgRepoContext, w *db.Webhook) {
 	c.Data["Webhook"] = w
+	c.Data["HttpMethods"] = conf.Webhook.HttpMethods
 
 	if c.HasError() {
 		c.Success(orCtx.TmplNew)
@@ -443,6 +494,34 @@ func WebhooksDiscordEditPost(c *context.Context, orCtx *orgRepoContext, f form.N
 	validateAndUpdateWebhook(c, orCtx, w)
 }
 
+func WebhooksCustomEditPost(c *context.Context, orCtx *orgRepoContext, f form.NewCustomHook) {
+	c.Title("repo.settings.update_webhook")
+	c.PageIs("SettingsHooks")
+	c.PageIs("SettingsHooksEdit")
+
+	w := loadWebhook(c, orCtx)
+	if c.Written() {
+		return
+	}
+
+	meta, err := jsoniter.Marshal(&db.SlackMeta{
+		Username:   f.Username,
+		IconURL:    f.IconURL,
+		HttpMethod: f.HttpMethod,
+		Color:      f.Color,
+	})
+	if err != nil {
+		c.Error(err, "marshal JSON")
+		return
+	}
+
+	w.URL = f.PayloadURL
+	w.Meta = string(meta)
+	w.HookEvent = toHookEvent(f.Webhook)
+	w.IsActive = f.Active
+	validateAndUpdateWebhook(c, orCtx, w)
+}
+
 func WebhooksDingtalkEditPost(c *context.Context, orCtx *orgRepoContext, f form.NewDingtalkHook) {
 	c.Title("repo.settings.update_webhook")
 	c.PageIs("SettingsHooks")
diff --git a/public/img/http_01.png b/public/img/http_01.png
new file mode 100644
index 0000000000000000000000000000000000000000..83b931834ca5685b340d2b7b22e913c7cfbb874b
GIT binary patch
literal 27793
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
W_bTX7rUI`I11ZSDWh$if1O5kXd*Ai|

literal 0
HcmV?d00001

diff --git a/templates/repo/settings/webhook/custom.tmpl b/templates/repo/settings/webhook/custom.tmpl
new file mode 100644
index 00000000..120e581a
--- /dev/null
+++ b/templates/repo/settings/webhook/custom.tmpl
@@ -0,0 +1,25 @@
+{{if eq .HookType "custom"}}
+<!--	{{template "base/alert" .}}-->
+	<div class="organization settings webhooks">
+	<p>Add Custom hook from JSON:</p>
+	<form class="ui form" action="{{if .PageIsSettingsHooksNew}}{{$.Link}}{{else}}{{.FormURL}}{{end}}" method="post">
+		{{.CSRFTokenHTML}}
+		<div class="required field {{if .Err_PayloadURL}}error{{end}}">
+			<label for="payload_url">{{.i18n.Tr "repo.settings.payload_url"}}</label>
+			<input id="payload_url" name="payload_url" type="url" value="{{.Webhook.URL}}" autofocus required>
+		</div>
+
+		<div class="field">
+			<label for="http_method">HTTP Method:</label>
+			<input id="http_method" name="http_method" type="text" value="{{.SlackMeta.HttpMethod}}" autofocus required placeholder="write in one of -> GET, POST, PATCH, PUT, DELETE"></input>
+		</div>
+
+		<div class="field">
+			<label for="icon_url">JSON:</label>
+			<textarea id="icon_url" name="icon_url" placeholder="{}" cols="40" rows="5" autofocus required>{{.SlackMeta.IconURL}}</textarea>
+		</div>
+
+		{{template "repo/settings/webhook/settings" .}}
+	</form>
+	</div>
+{{end}}
diff --git a/templates/repo/settings/webhook/history.tmpl b/templates/repo/settings/webhook/history.tmpl
index f5617d1e..e110bd93 100644
--- a/templates/repo/settings/webhook/history.tmpl
+++ b/templates/repo/settings/webhook/history.tmpl
@@ -50,7 +50,6 @@
 							{{if .RequestInfo}}
 								<h5>{{$.i18n.Tr "repo.settings.webhook.headers"}}</h5>
 								<pre class="raw"><strong>Request URL:</strong> {{.URL}}
-<strong>Request method:</strong> POST
 {{ range $key, $val := .RequestInfo.Headers }}<strong>{{$key}}:</strong> {{$val}}
 {{end}}</pre>
 								<h5>{{$.i18n.Tr "repo.settings.webhook.payload"}}</h5>
@@ -65,7 +64,7 @@
 								<pre class="raw">{{ range $key, $val := .ResponseInfo.Headers }}<strong>{{$key}}:</strong> {{$val}}
 {{end}}</pre>
 								<h5>{{$.i18n.Tr "repo.settings.webhook.body"}}</h5>
-								<pre class="raw"><code class="nohighlight">{{.ResponseInfo.Body}}</code></pre>
+								<pre class="raw"><code class="json">{{.ResponseInfo.Body}}</code></pre>
 							{{else}}
 								N/A
 							{{end}}
diff --git a/templates/repo/settings/webhook/list.tmpl b/templates/repo/settings/webhook/list.tmpl
index 432c2896..2005a890 100644
--- a/templates/repo/settings/webhook/list.tmpl
+++ b/templates/repo/settings/webhook/list.tmpl
@@ -24,6 +24,12 @@
 			{{end}}
 		</div>
 	</div>
+
+<!--	<div class="field">-->
+<!--		<label for="debug">TEST:</label>-->
+<!--		<textarea id="debug" class="json" readonly>{{.}}</textarea>-->
+<!--	</div>-->
+
 	<div class="ui bottom attached segment">
 		<span><b>{{.i18n.Tr "repo.settings.webhooks.add_new"}}</b></span>
 		<div class="ui selection jump dropdown">
@@ -43,6 +49,10 @@
 						<a class="item logo" href="{{$.Link}}/discord/new">
 							<img class="img-12" src="{{AppSubURL}}/img/discord.png">Discord
 						</a>
+					{{else if eq . "custom"}}
+						<a class="item logo" href="{{$.Link}}/custom/new">
+							<img class="img-12" src="{{AppSubURL}}/img/http_01.png">Custom
+						</a>
 					{{else if eq . "dingtalk"}}
 						<a class="item logo" href="{{$.Link}}/dingtalk/new">
 							<img class="img-12" src="{{AppSubURL}}/img/dingtalk.png">Dingtalk
diff --git a/templates/repo/settings/webhook/new.tmpl b/templates/repo/settings/webhook/new.tmpl
index 5e3ada7e..9df62f36 100644
--- a/templates/repo/settings/webhook/new.tmpl
+++ b/templates/repo/settings/webhook/new.tmpl
@@ -21,6 +21,7 @@
 					{{template "repo/settings/webhook/slack" .}}
 					{{template "repo/settings/webhook/discord" .}}
 					{{template "repo/settings/webhook/dingtalk" .}}
+					{{template "repo/settings/webhook/custom" .}}
 				</div>
 
 				{{template "repo/settings/webhook/history" .}}
